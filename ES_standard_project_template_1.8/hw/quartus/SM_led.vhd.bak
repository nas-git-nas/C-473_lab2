library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity WS2812Controller is

	port(
		clk 			: in std_logic;
		nReset 		: in std_logic;
		
		-- Internal interface (i.e. Avalon slave).
		address 		: in std_logic_vector(2 downto 0);
		write 		: in std_logic;
		writedata 	: in std_logic_vector(31 downto 0);
		
		-- External interface: connection to LEDs.
		RegOut 		: out std_logic
	);
end WS2812Controller;


Architecture Comp of WS2812Controller is
	TYPE State IS (Refresh, DutyCycle, H1, H0, L1, L0, LedCheck);		-- All different states we can be in
	Signal SM: State;
	
	
	signal led_counter		: integer range 0 to 127;		-- Keep track on which led we are programming right now
	signal led_bit				: integer range 0 to 24;		-- Which bit in the current led is being programmed
	
	TYPE leds_array IS ARRAY(127 downto 0) OF std_logic_vector(23 downto 0);		-- Vector type to hold all colours
	signal led_data 			: leds_array := (others => X"000000");							-- Initialize all array to zero
	
	-- To be set by c-program
	signal num_of_leds 		: integer range 0 to 127 := 0;

Begin

	Process(clk, nReset)
	Begin
	if nReset = '0' then
		-- Set all to zero
		refresh_counter <= 0;
		
		
	elsif rising_edge(clk) then
		
		-- Go through which state we are in 
		case SM is
		when Refresh =>
			if refresh_counter >= refresh_time then
				refresh_counter <= 0;
				SM <= DutyCycle;
			else
				refresh_counter <= refresh_counter + 1;
			end if;
		when DutyCycle =>
			if led_data(led_counter)(led_bit) = '1' then
				
		when H1 =>
		when H0 =>
		when L1 =>
		when L0 =>
		when LedCheck => 
		
	end Process

	WriteData:
	process(clk, nReset)
		begin
			if nReset = '0' then
				led_data	<= (others => X"000000");
				--refresh_time <= 0;
			elsif rising_edge(clk) then
				if write = '1' then
					if to_integer(unsigned(address)) = 1 then -- Specify number of leds (max 127)
						num_of_leds <= to_integer(unsigned(writedata(6 downto 0)));
					elsif to_integer(unsigned(address)) <= 129 then
						led_data(to_integer(unsigned(address)) - 2) <= writedata(23 downto 0);	-- Write to the appropriate led
					end if;
				end if;
			end if;	
	end process WriteData;
			